---
apiVersion: 1.0.0
metadata:
  generateName: vertx-health-checks-
projects:
  -
    name: vertx-health-checks-example-redhat
    source:
      location: "https://github.com/crw-samples/vertx-health-checks-example-redhat"
      branch: master
      type: git
components:
  -
    type: chePlugin
    id: redhat/java11/latest
    preferences:
      java.server.launchMode: Standard
  -
    # NOTE: instead of the old stack-analysis script, should be able to use the latest dependency-analysis plugin instead
    type: chePlugin
    id: redhat/dependency-analytics/latest
  -
    type: dockerimage
    alias: maven
    image: registry.redhat.io/codeready-workspaces/plugin-java11-rhel8:2.16
    env:
      - name: JAVA_OPTS
        value: "-XX:MaxRAMPercentage=50.0 -XX:+UseParallelGC -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=20 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xms20m -Djava.security.egd=file:/dev/./urandom -Duser.home=/home/jboss"
      - name: MAVEN_OPTS
        value: $(JAVA_OPTS)
    memoryLimit: 512Mi
    mountSources: true
    volumes:
      - name: m2
        containerPath: /home/jboss/.m2
    endpoints:
      - name: 'health-checks-endpoint'
        port: 8080 
commands:
  -
    name: 1. Build
    actions:
      -
        type: exec
        component: maven
        command: "mvn clean install"
        workdir: ${CHE_PROJECTS_ROOT}/vertx-health-checks-example-redhat
  -
    name: 2. Build and run
    actions:
      -
        type: exec
        component: maven
        command: "mvn clean install && mvn -Dvertx.disableDnsResolver=true vertx:run"
        workdir: ${CHE_PROJECTS_ROOT}/vertx-health-checks-example-redhat
  -
    name: 3. Run in debug mode
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/vertx-health-checks-example-redhat'
        type: exec
        command: "mvn -DskipTests vertx:debug"
        component: maven
  - 
    name: 4. Run tests
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/vertx-health-checks-example-redhat'
        type: exec
        command: "mvn verify"
        component: maven
  - 
    name: 5. Log into deployment cluster
    actions:
      - workdir: "${CHE_PROJECTS_ROOT}/vertx-health-checks-example-redhat"
        type: exec
        command: |
          echo
          echo "Before you can deploy this application to an openshift cluster,"
          echo "you must run 'oc login ...' in the maven terminal."
          echo
        component: maven
  - 
    name: 6. Deploy to OpenShift
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/vertx-health-checks-example-redhat'
        type: exec
        command: "mvn fabric8:deploy -Popenshift -DskipTests -Dvertx.disableDnsResolver=true"
        component: maven
  - name: Debug remote java application
    actions:
      - referenceContent: |
          {
           "version": "0.2.0",
           "configurations": [
             {
               "type": "java",
               "name": "Debug (Attach) - Remote",
               "request": "attach",
               "hostName": "localhost",
               "port": 5005
             }]
           }
        type: vscode-launch
