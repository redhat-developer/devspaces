#!/usr/bin/env python3
import sys
import getopt
import os
import copy
import re
import json
import logging
import smtplib
import datetime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

from github import Github
import jira
import requests
import mistletoe
from jira_renderer import JIRARenderer
import warnings

JIRA_PROJECT = "CRW"
JIRA_URL = "https://issues.redhat.com"
JIRA_EMAIL = os.environ["JIRA_EMAIL"]
JIRA_TOKEN = os.environ["JIRA_TOKEN"]

GITHUB_TOKEN = os.environ["GITHUB_TOKEN"]
GITHUB_REPO = "eclipse/che"

ISSUE_SYNC_COMMENT = "sync'd to Red Hat JIRA https://issues.redhat.com/browse/"

SMTP_HOST = "smtp.corp.redhat.com"
SMTP_PORT = 25
EMAIL_FROM = "nboldt@redhat.com"
EMAIL_TO_DEFAULT = "nboldt@redhat.com"

# defaults
LOG_LEVEL = logging.INFO
NUM_WEEKS = 2
DRY_RUN=False

# parse option flags
options, remainder = getopt.gnu_getopt(
  sys.argv[1:], 'o:v', ['weeks=', 'debug', 'dryrun', 'dry-run',])
for opt, arg in options:
  if opt in ('--dryrun', '--dry-run'):
    DRY_RUN=True
  elif opt in ('--debug'):
    LOG_LEVEL = logging.DEBUG
  elif opt == '--weeks':
    NUM_WEEKS = int(arg)
  
print("Check for new&noteworthy issues closed in the last " + str(NUM_WEEKS) + " weeks")
if DRY_RUN:
  print("Dry run. Nothing will be created.")

class ExitOnErrorHandler(logging.StreamHandler):
    def emit(self, record):
        super().emit(record)
        if record.levelno in (logging.ERROR, logging.CRITICAL):
            raise SystemExit(-1)
logging.basicConfig(handlers=[ExitOnErrorHandler()], format='%(levelname)s: %(message)s', level=LOG_LEVEL)

j = jira.JIRA(server=JIRA_URL, token_auth=JIRA_TOKEN)

g = Github(GITHUB_TOKEN)
r = g.get_repo(GITHUB_REPO)
GITHUB_USER = g.get_user().login

def send_email(msg_from, msg_to, subject, body):
  if not msg_to:
    msg_to = EMAIL_TO_DEFAULT
  message = MIMEMultipart("alternative")
  message["Subject"] = subject
  message["From"] = msg_from
  message["To"] = msg_to
  part1 = MIMEText(body, "plain")
  message.attach(part1)
  if not DRY_RUN:
    with smtplib.SMTP(SMTP_HOST, SMTP_PORT) as server:
      server.sendmail(msg_from, msg_to, message.as_string())
  else:
    logging.info(" - send email to %s" % message["To"])
    logging.debug("Email Content:\n%s" % message.as_string())

def get_area_lead_email(area):
  try:
    components = json.load(open('components.json', 'r'))
    for k,v in components["Components"].items():
      if area in v["Labels"]:
        return v["Lead"] + "@redhat.com"
  except:
    logging.error("get_area_lead_email: Exception while processing components.json")
  return ""

class IssueToJIRA:
  def _map_labels(data):
    ret = []
    for l in data:
      if l['name'] == 'new&noteworthy':
        ret.append('noteworthy')
    return ret
  
  def _map_fixVersions(data):
    url = 'https://raw.githubusercontent.com/redhat-developer/devspaces/devspaces-3-rhel-8/dependencies/job-config.json'
    resp = requests.get(url)
    if resp.status_code != 200:
      logging.error("Unable to fetch fix version mapping from theia-sources.groovy in github")
    txt = resp.text

    version_map = json.loads(txt)
    try:
      n = {}
      version_map = version_map["Jobs"]["theia"]
      for k, vs in version_map.items():
        for v in vs['upstream_branch']:
          n[v] = k
      version_map = n
    except:
      logging.error("Unexpected fixVersions mapping")

    # modify CRW version to be JIRA friendly
    for k, v in version_map.items():
      if v[-2:] == ".x":  # leave 3.x branch as-is
        continue
      if v.count('.') == 1:
        version_map[k] = v + '.0.GA'
      elif v.count('.') == 2:
        version_map[k] = v + '.GA'
      else:
        logging.error("Unable to recognize formation in fix version mapping for: %s" % k)
    
    # now that we have mapping, convert milestone to fixVersions
    if data and 'title' in data and data['title']:
      if 'DevWorkspace' in data['title']:
        return ['3.x']
      elif data['title'] in version_map:
        return [version_map[data['title']]]
      elif data['title'] + '.x' in version_map:
        return [version_map[data['title'] + '.x']]
    return []

  # map github issue to jira issue
  data_map = {
    'body': 'description',
    'title': 'summary',
    'labels': ('labels', _map_labels),
    'milestone': ('fixVersions', _map_fixVersions)
  }
  # default keys for creating jira issue
  default_jira_data = {
    'project': 'CRW',
    'issuetype': {'name': 'Task'},
    'components': [{"name": "docs"}],
    'customfield_12310211': 'To be written by team lead or assignee',
    'customfield_12310213': {'value': 'Not Yet Documented'}
  }

  # convert github issue to jira issue
  #  - use raw data from both apis. map keys using data_map.
  #  - non-trivial data_map can use (name, function) tuple instead of name
  def convert(issue):
    gh_data = issue.raw_data
    # logging.debug(json.dumps(gh_data, indent=2))
    jira_data = copy.deepcopy(IssueToJIRA.default_jira_data)

    for (gh_k, jira_k) in IssueToJIRA.data_map.items():
      if gh_k in gh_data.keys():
        if isinstance(jira_k, tuple) and callable(jira_k[1]):
          jira_data[jira_k[0]] = jira_k[1](gh_data[gh_k])
        elif isinstance(jira_k, str):
          jira_data[jira_k] = gh_data[gh_k]
        else:
          logging.error("invalid mapping for github data %s" % gh_k)
      else:
        logging.error("expecting github key %s to exist in github issue data" % gh_k)
    return jira_data

# Retrieve Issues from github
#   search term definitions: https://pygithub.readthedocs.io/en/latest/github_objects/Issue.html
issue_search = {
  'state': 'closed',
  'labels': ['new&noteworthy']
}
all_issues = []
try:
  all_issues = r.get_issues(**issue_search)
except BaseException as err:
  logging.error("No closed new&noteworthy issues found: https://github.com/eclipse/che/issues?q=is%3Aissue+is%3Aclosed+label%3Anew%26noteworthy")
  logging.error(f"Unexpected {err}, {type(err)}")

# filter out items
pending_issues = []
for i in all_issues:
  # only look at issues closed in last NUM_WEEKS weeks
  if datetime.datetime.strptime(i.raw_data['closed_at'], '%Y-%m-%dT%H:%M:%SZ') < datetime.datetime.now() - datetime.timedelta(weeks=NUM_WEEKS):
    continue

  # search through comments for sync text of already sync'd issues
  found = False
  for c in i.get_comments():
    if c.body.find(ISSUE_SYNC_COMMENT) != -1:    # and c.user.login == GITHUB_USER
      found = True
      logging.info("Skip https://github.com/eclipse/che/issues/%s -- Already sync'd" % i.number)
      break
  if not found:
    pending_issues.append(i)

# convert issue to jira
for i in pending_issues:
  new_jira = IssueToJIRA.convert(i)

  if not new_jira['fixVersions']:
    d = i.raw_data
    milestone = d['milestone']['title'] if d['milestone'] and 'title' in d['milestone'] else ""
    logging.warning("Skip https://github.com/eclipse/che/issues/%s -- Invalid/Empty milestone (%s)" % (i.number, milestone))
    for l in d["labels"]:
      msg_to = get_area_lead_email(l["name"])
      if msg_to:
        break
    subject = "repo " + GITHUB_REPO + " issue# " + str(i.number) + " has invalid milestone"
    body = f"Issue URL: { d['html_url'] }\nTitle: { d['title'] }\nUpdated: { d['updated_at'] }\n\n" + \
      f"Issue not synced to JIRA because milestone field is invalid ({ milestone })"
    send_email(EMAIL_FROM, msg_to, subject, body)
    continue
  elif '3.x' in new_jira['fixVersions']:
    logging.info("Skip https://github.com/eclipse/che/issues/%s -- for future release" % i.number)
    continue

  logging.info("Sync https://github.com/eclipse/che/issues/%s to JIRA" % i.number)
  logging.debug("  - JIRA with raw data:\n" + json.dumps(new_jira, indent=2) + '\n')
  if not DRY_RUN:
    # massage new_jira to be jira API friendly
    fvs = []   # format fixVersions
    for v in new_jira['fixVersions']:
      fvs.append({'name': v})
    new_jira['fixVersions'] = fvs
    # affects version set to same default value as fixversion
    new_jira['versions'] = fvs 

    customfields = {}   # custom fields only allowed to be updated and not set on create?
    for k, v in new_jira.items():
      if k.startswith('customfield_'):
        customfields[k] = v
    for k in customfields.keys():
      del new_jira[k]
    new_jira['description'] = '*Synced from Eclipse Che issue*\n\nhttps://github.com/eclipse/che/issues/' + str(i.number) + '\n\n' + mistletoe.markdown(new_jira['description'], JIRARenderer)

    new_jira_issue = j.create_issue(fields=new_jira)
    logging.info("JIRA https://issues.redhat.com/browse/%s created" % new_jira_issue.key)
    new_jira_issue.update(fields=customfields)

    with warnings.catch_warnings():
      warnings.simplefilter("ignore")
      j.add_remote_link(new_jira_issue, {'url': "https://github.com/eclipse/che/issues/" + str(i.number), \
        'title': new_jira['summary'] + " #" + str(i.number), \
        "icon": {"url16x16": "https://github.com/favicon.ico"}})

    # update github issue with comment
    i.create_comment(ISSUE_SYNC_COMMENT + new_jira_issue.key)

logging.info("%s JIRAs created." % len(pending_issues))

# for debugging, dump json for a complete issue to figure out field names
# i=j.issue("CRW-1684")
# print(json.dumps(i.raw,indent=2))
