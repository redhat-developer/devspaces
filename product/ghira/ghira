#!/usr/bin/env python3
import sys
import os
import copy
import re
import json
import logging
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

from github import Github
import jira
import requests

JIRA_PROJECT = "CRW"
JIRA_URL = "https://issues.redhat.com"
JIRA_USER = os.environ["JIRA_USER"]
JIRA_PASSWORD = os.environ["JIRA_PASSWORD"]

GITHUB_KEY = os.environ["GITHUB_KEY"]
GITHUB_REPO = "eclipse/che"

ISSUE_SYNC_COMMENT = "sync'd to redhat jira #"

SMTP_HOST = "smtp.corp.redhat.com"
SMTP_PORT = 25
EMAIL_FROM = "nboldt@redhat.com"
EMAIL_TO_DEFAULT = "nboldt@redhat.com"

# LOG_LEVEL = logging.DEBUG
LOG_LEVEL = logging.INFO
class ExitOnErrorHandler(logging.StreamHandler):
    def emit(self, record):
        super().emit(record)
        if record.levelno in (logging.ERROR, logging.CRITICAL):
            raise SystemExit(-1)
logging.basicConfig(handlers=[ExitOnErrorHandler()], format='%(levelname)s: %(message)s', level=LOG_LEVEL)

DRY_RUN='--dryrun' in sys.argv
if DRY_RUN:
  logging.info("Dry run.  Nothing will be created.")

j = jira.JIRA(JIRA_URL, basic_auth=(JIRA_USER, JIRA_PASSWORD))
g = Github(GITHUB_KEY)
r = g.get_repo(GITHUB_REPO)
GITHUB_USER = g.get_user().login

def send_email(msg_from, msg_to, subject, body):
  if not msg_to:
    msg_to = EMAIL_TO_DEFAULT
  message = MIMEMultipart("alternative")
  message["Subject"] = subject
  message["From"] = msg_from
  message["To"] = msg_to
  part1 = MIMEText(body, "plain")
  message.attach(part1)
  if not DRY_RUN:
    with smtplib.SMTP(SMTP_HOST, SMTP_PORT) as server:
      server.sendmail(msg_from, msg_to, message.as_string())
  else:
    logging.info("Email to send: \n%s" % message.as_string())

def get_area_lead_email(area):
  try:
    components = json.load(open('components.json', 'r'))
    for k,v in components["Components"].items():
      if area in v["Labels"]:
        return v["Lead"] + "@redhat.com"
  except:
    logging.error("get_area_lead_email: Exception while processing components.json")
  return ""

class IssueToJIRA:
  def _map_labels(data):
    ret = []
    for l in data:
      if l['name'] == 'new&noteworthy':
        ret.append('noteworthy')
    return ret
  
  def _map_fixVersions(data):
    url = 'https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/crw-2-rhel-8/dependencies/VERSION.json'
    resp = requests.get(url)
    if resp.status_code != 200:
      logging.error("Unable to fetch fix version mapping from theia-sources.groovy in github")
    txt = resp.text

    version_map = json.loads(txt)
    try:
      n = {}
      version_map = version_map["Jobs"]["theia"]
      for k, vs in version_map.items():
        for v in vs:
          n[v] = k
      version_map = n
    except:
      logging.error("Unexpected fixVersions mapping")

    # modify CRW version to be JIRA friendly
    for k, v in version_map.items():
      if v[-2:] == ".x":  # leave 2.x branch as-is
        continue
      if v.count('.') == 1:
        version_map[k] = v + '.0.GA'
      elif v.count('.') == 2:
        version_map[k] = v + '.GA'
      else:
        logging.error("Unable to recognize formation in fix version mapping for: %s" % k)
    
    # now that we have mapping, convert milestone to fixVersions
    if data and 'title' in data and data['title']:
      if 'DevWorkspace' in data['title']:
        return ['2.x']
      elif data['title'] in version_map:
        return [version_map[data['title']]]
      elif data['title'] + '.x' in version_map:
        return [version_map[data['title'] + '.x']]
    return []

  # map github issue to jira issue
  data_map = {
    'body': 'description',
    'title': 'summary',
    'labels': ('labels', _map_labels),
    'milestone': ('fixVersions', _map_fixVersions)
  }
  # default keys for creating jira issue
  default_jira_data = {
    'project': 'CRW',
    'issuetype': {'name': 'Task'},
    'customfield_12310211': 'To be written by team lead or assignee',
    'customfield_12310213': 'Not Yet Documented',
  }

  # convert github issue to jira issue
  #  - use raw data from both apis. map keys using data_map.
  #  - non-trivial data_map can use (name, function) tuple instead of name
  def convert(issue):
    gh_data = issue.raw_data
    logging.debug(json.dumps(gh_data, indent=2))
    jira_data = copy.deepcopy(IssueToJIRA.default_jira_data)

    for (gh_k, jira_k) in IssueToJIRA.data_map.items():
      if gh_k in gh_data.keys():
        if isinstance(jira_k, tuple) and callable(jira_k[1]):
          jira_data[jira_k[0]] = jira_k[1](gh_data[gh_k])
        elif isinstance(jira_k, str):
          jira_data[jira_k] = gh_data[gh_k]
        else:
          logging.error("invalid mapping for github data %s" % gh_k)
      else:
        logging.error("expecting github key %s to exist in github issue data" % gh_k)
    return jira_data



# Retrieve Issues from github
#   search term definitions: https://pygithub.readthedocs.io/en/latest/github_objects/Issue.html
issue_search = {
  'state': 'open',
  'labels': ['new&noteworthy']
}
all_issues = r.get_issues(**issue_search)

# filter out items already sync'd
pending_issues = []
for i in all_issues:
  # search through comments for sync text
  found = False
  for c in i.get_comments():
    if c.user.login == GITHUB_USER and c.body.find(ISSUE_SYNC_COMMENT) != -1:
      found = True
      logging.info("Issue %s already sync'd" % i.number)
      break
  if not found:
    pending_issues.append(i)

# convert issue to jira
for i in pending_issues:
  new_jira = IssueToJIRA.convert(i)

  if not new_jira['fixVersions']:
    d = i.raw_data
    milestone = d['milestone']['title'] if d['milestone'] and 'title' in d['milestone'] else ""
    logging.warning("Skipping Issue %s -- Invalid/Empty milestone (%s)" % (i.number, milestone))
    for l in d["labels"]:
      msg_to = get_area_lead_email(l["name"])
      if msg_to:
        break
    subject = "repo " + GITHUB_REPO + " issue# " + str(i.number) + " has invalid milestone"
    body = f"Issue URL: { d['html_url'] }\nTitle: { d['title'] }\nUpdated: { d['updated_at'] }\n\n" + \
      f"Issue was not synced to JIRA becase the milestone field was invalid ({ milestone })"
    send_email(EMAIL_FROM, msg_to, subject, body)
    continue
  elif '2.x' in new_jira['fixVersions']:
    logging.info("Skipping Issue %s -- for future release" % i.number)
    continue

  logging.info("Sync Issue %s to JIRA" % i.number)
  logging.debug("  - JIRA with raw data:\n" + json.dumps(new_jira, indent=2) + '\n')
  if not DRY_RUN:
    # docs example: https://jira.readthedocs.io/en/master/examples.html#issues
    new_jira_issue = j.create_issue(fields=new_jira)  

    # update github issue with comment
    i.create_comment(ISSUE_SYNC_COMMENT + new_jira_issue.key)
